// Code generated by MockGen. DO NOT EDIT.
// Source: internal/sorter/sorter.go

// Package sorter is a generated GoMock package.
package mocks

import (
	models "TaskProcessingService/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITaskSorter is a mock of ITaskSorter interface.
type MockITaskSorter struct {
	ctrl     *gomock.Controller
	recorder *MockITaskSorterMockRecorder
}

// MockITaskSorterMockRecorder is the mock recorder for MockITaskSorter.
type MockITaskSorterMockRecorder struct {
	mock *MockITaskSorter
}

// NewMockITaskSorter creates a new mock instance.
func NewMockITaskSorter(ctrl *gomock.Controller) *MockITaskSorter {
	mock := &MockITaskSorter{ctrl: ctrl}
	mock.recorder = &MockITaskSorterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITaskSorter) EXPECT() *MockITaskSorterMockRecorder {
	return m.recorder
}

// Sort mocks base method.
func (m *MockITaskSorter) Sort(tasks models.Tasks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sort", tasks)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sort indicates an expected call of Sort.
func (mr *MockITaskSorterMockRecorder) Sort(tasks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sort", reflect.TypeOf((*MockITaskSorter)(nil).Sort), tasks)
}
